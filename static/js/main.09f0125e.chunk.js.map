{"version":3,"sources":["store/getUsers.js","components/FolderComponent.js","components/ReduxComponent.js","App.js","store/index.js","index.js"],"names":["GET_USERS","getUsersThunk","dispatch","a","axios","get","res","users","data","type","payload","console","error","FolderComponent","props","handleToggleClick","setState","state","showlist","this","id","onClick","style","margin","map","user","name","email","Component","connect","ReduxComponent","App","className","logger","createLogger","collapsed","middleware","applyMiddleware","thunkMiddleware","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"mQAGMA,EAAY,YAWLC,EAAgB,yDAAM,WAAMC,GAAN,eAAAC,EAAA,+EAEjBC,IAAMC,IAAI,8CAFO,OAE7BC,EAF6B,OAKjCJ,GAbgBK,EAaED,EAAIE,KAZf,CACLC,KAAMT,EACNU,QAASH,KAKsB,gDAQjCI,QAAQC,MAAR,MARiC,kCARlB,IAACL,IAQiB,oBAAN,uD,OCTvBM,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,kBAAoB,WAClB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAACC,UAAWD,EAAMC,cAZ3B,EAAKD,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,WAEEC,KAAKL,MAAMb,kB,oBASb,WACE,GAAGkB,KAAKF,MAAMC,SAAU,CACtB,IAAIX,EAAQY,KAAKL,MAAMP,MACvB,OACE,qCACE,wBAAQa,GAAG,gBAAgBC,QAASF,KAAKJ,kBAAzC,oBAGA,qBAAKO,MAAO,CAACC,OAAQ,QAArB,SACIhB,EAAMiB,KAAK,SAACC,GACV,OACE,gCACE,wCAAWA,EAAKC,QAChB,yCAAYD,EAAKE,WAFTF,EAAKL,YAYzB,OACE,wBAAQA,GAAG,gBAAgBC,QAASF,KAAKJ,kBAAzC,wB,GA3CoBa,aAgEfC,mBANf,SAAkBZ,GAChB,MAAO,CACLV,MAAOU,EAAMV,UARjB,SAAqBL,GACnB,MAAO,CACLD,cAAe,kBAAMC,EAASD,SAUnB4B,CAA+BhB,GCjExCiB,E,uKACJ,WAEEX,KAAKL,MAAMb,kB,oBAGb,WAEE,IAAIM,EAAQY,KAAKL,MAAMP,MACvB,OACE,qBAAKe,MAAO,CAACC,OAAQ,QAArB,SACIhB,EAAMiB,KAAK,SAACC,GACV,OACE,gCACE,wCAAWA,EAAKC,QAChB,yCAAYD,EAAKE,WAFTF,EAAKL,a,GAbAQ,aAuCdC,aANf,SAAkBZ,GAChB,MAAO,CACLV,MAAOU,EAAMV,UATjB,SAAqBL,GACnB,MAAO,CACLD,cAAe,kBAAMC,EAASD,SAWnB4B,CAA+BC,GC/B/BC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,wBCEAC,EAASC,uBAAa,CAAEC,WAAW,IACnCC,EAAaC,YAAgBC,IAAiBL,GAKrCM,EAHDC,aJeS,WAAkC,IAAjCvB,EAAgC,uDAAxB,CAACV,MAAO,IAAKkC,EAAW,uCAItD,OAAQA,EAAOhC,MACb,KAAKT,EACH,MAAO,CACLO,MAAOkC,EAAO/B,SAElB,QACE,OAAOO,KIzBsBmB,GCJnCM,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.09f0125e.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// ACTION TYPES;\nconst GET_USERS = \"GET_USERS\";\n\n// ACTION CREATORS;\nconst getUsers = (users) => {\n  return {\n    type: GET_USERS,\n    payload: users,\n  };\n};\n\n// THUNK CREATORS;\nexport const getUsersThunk = () => async dispatch => {\n\ttry {\n\t\tlet res = await axios.get('https://jsonplaceholder.typicode.com/users');\n\t\t//res.data is the array returned by api endpoint\n\t\t//this is the payload we send to the reducer\n\t\tdispatch(getUsers(res.data));\n\n\t} catch(err) {\n\t\tconsole.error(err);\n\t}\n};\n\n// REDUCER;\nexport const reducer = (state = {users: []}, action) => {\n//initial state has users as empty array\n//after action GET_USERS the state will have\n//the data from the API as users array\n  switch (action.type) {\n    case GET_USERS:\n      return {\n        users: action.payload,\n      }\n    default:\n      return state;\n  }\n};","import { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { getUsersThunk } from '../store/getUsers'\n\n\nclass FolderComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showlist: false \n    }\n  }\n\n  componentDidMount() {\n    //get thunk from props\n    this.props.getUsersThunk();\n  } \n  \n  handleToggleClick = () => {\n    this.setState(state => {\n      return {showlist: !state.showlist}\n    });\n  }\n  \n  render() {\n    if(this.state.showlist) {\n      let users = this.props.users;\n      return (\n        <>\n          <button id=\"toggle-button\" onClick={this.handleToggleClick}>\n            Toggle\n          </button>   \n          <div style={{margin: '10px'}}>\n            { users.map( (user) => {\n                return (\n                  <div key={user.id}>\n                    <h3>Name: {user.name}</h3>\n                    <h4>Email: {user.email}</h4> \n                  </div>\n                )\n              })\n            }\n          </div>\n        </>\n        \n      );\n    } else {\n        return (\n          <button id=\"toggle-button\" onClick={this.handleToggleClick}>\n            Toggle\n          </button>\n        );\n    }\n  }\n};\n//REDUX SETUP\n//add thunks to props\nfunction mapDispatch(dispatch) {\n  return { \n    getUsersThunk: () => dispatch(getUsersThunk()) \n  }\n}\n//add redux state to props\nfunction mapState(state) {\n  return {\n    users: state.users\n  }\n}\n\nexport default connect(mapState, mapDispatch)(FolderComponent);","import { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { getUsersThunk } from '../store/getUsers'\n\nclass ReduxComponent extends Component {\n  componentDidMount() {\n    //get thunk from props\n    this.props.getUsersThunk();\n  }  \n\n  render() {\n    //get redux state from props\n    let users = this.props.users;\n    return (\n      <div style={{margin: '10px'}}>\n        { users.map( (user) => {\n            return (\n              <div key={user.id}>\n                <h3>Name: {user.name}</h3>\n                <h4>Email: {user.email}</h4> \n              </div>\n            )\n          })\n        }\n      </div>\n    );\n  }\n};\n\n//add thunks to props\nfunction mapDispatch(dispatch) {\n  return { \n    getUsersThunk: () => dispatch(getUsersThunk()) \n  }\n}\n\n//add redux state to props\nfunction mapState(state) {\n  return {\n    users: state.users\n  }\n}\n\nexport default connect(mapState, mapDispatch)(ReduxComponent)\n\n\n\n\n","import './App.css';\nimport FolderComponent from './components/FolderComponent';\nimport ReduxComponent from './components/ReduxComponent'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FolderComponent />\n    </div>\n  );\n}\n\nexport default App;","import { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n// will normally be importing several reducers \n// and need to combine them using combineReducers;\nimport { reducer } from './getUsers';\n\n// Construct our Redux store;\nconst logger = createLogger({ collapsed: true });\nconst middleware = applyMiddleware(thunkMiddleware, logger);\n\nconst store = createStore(reducer, middleware);\n\n// Export our store by default, which will be provided to and injected within our entire application;\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}